Ta8e3dfa7be553d44aa42f03a308a6609	own_claim-GOLD 32 102	Performance is a key issue in choosing the adequate integration method
T124aef4fa7d0742aa0077a6e6c79e62c	own_claim-GOLD 605 755	The time step for one iteration, which represents the time discretization required to reach a given accuracy or numerical stability for a given method
Tbb678f061678be001177f900392dcf0b	own_claim-GOLD 759 928	The desired accuracy of the resolution, which may be coarse if only static equilibrium is to be computed, or high if the whole dynamic evolution of the system is desired
T71878b0a7b9a8201115e93f16a7ff371	own_claim-GOLD 1021 1140	The numerical stability of the method, which also limits the time step for a given method and a given mechanical system
T6e118f0a64f93c604579b09e05c6a70b	own_claim-GOLD 2568 2764	The most important fact to note is that the application of the Backward Euler method with a reduced number of Conjugate Gradient iterations compares very well with the traditional explicit methods
T72d4c40a97846b1df7e66a0a3924bb39	own_claim-GOLD 2766 2855	With one iteration only, it is barely worse than the very simple explicit Midpoint method
T38db63c9980bb6ae228ad6c5630cfa82	own_claim-GOLD 2857 2875	Our implementation
T8b1f996b2a8f2f792fc91863b2436238	own_claim-GOLD 2901 3111	does not explicitly construct the matrix of the system to be resolved by the Conjugate Gradient, but computes “on the fly” the product of this matrix with vectors when needed by the Conjugate Gradient algorithm
T073b949fcb5fb97acb62c190895bc819	own_claim-GOLD 3113 3212	This gives a very efficient implementation when using a low number of Conjugate Gradient iterations
Tf22b626a72a81bb4fecaeb922bea4340	own_claim-GOLD 3263 3310	which is often sufficient for most applications
T2a98acb0d14d9be06160528700328d26	own_claim-GOLD 3312 3427	These tests will help us to choose the method that gives the best compromise between accuracy and computation speed
T497c84aaed53f8d24e423f2fb510955f	own_claim-GOLD 4516 4657	This non-dimensional coefficient actually measures the “numerical difficulty” of computing an iteration of time step t with the given problem
Tbdc523acaa222dc62fdb24d6a6bb485b	own_claim-GOLD 5123 5194	the condition coefficient of the problem computed with (1) is K = 2 0 0
T16f2dbabc5ab2ff4d8a510a8c12312e5	own_claim-GOLD 5197 5283	It is possible to define similar coefficients related to bending and viscosity modulus
T2761a6d90f690cb3b101cf8681bb5910	own_claim-GOLD 6446 6692	This allows the iterations of the Conjugate Gradient algorithm to distribute the resolution numerical errors as evenly as possible between the particles, so that to obtain for instance a fall speed that does not depend on the mass of the particle
Tfbb1e0da31add882a3eedfcca6551329	own_claim-GOLD 7086 7138	Several interesting facts arise from this experiment
T321a8099aa861d820429a87ffa577a48	own_claim-GOLD 7140 7228	As a matter of numerical stability, the Midpoint method supports K values up to almost 3
T2b67eb68de75b1e0f0505d316346c16a	own_claim-GOLD 7237 7293	the RungeKutta method supports K values up to almost 100
Td8f7bc1883e8995349bb42052e6762fb	own_claim-GOLD 7315 7429	with Runge-Kutta, it is possible to use simulation time steps which are almost six times larger than with Midpoint
Ta1fcc95e84c91ada276729900bf5fe9c	own_claim-GOLD 7550 7650	the Runge-Kutta method seems to be computationally two times more efficient than the Midpoint method
T6ef7ecab3e6a7ea69229d58ad7e5100a	own_claim-GOLD 7652 7795	As a matter of simulation accuracy, both Midpoint and Runge-Kutta seem to preserve accuracy correctly within their range of numerical stability
T3731dc0941ec384d38c859c1cd237a8a	own_claim-GOLD 7996 8081	accuracy is well preserved with one Conjugate Gradient iteration up to a K value of 4
Tf2c5e4f6225c7f77e9af28da1c8329e7	own_claim-GOLD 8087 8185	increasing the iteration number n times also increases the K value n 2 times for the same accuracy
Ta4ebdb51dfb81963357a44a5537988de	own_claim-GOLD 8214 8336	the Inverse Euler method needs at least four Conjugate Gradient iterations to reach the accuracy of the Runge-Kutta method
T918f20bac69873975ba0675a5a79365a	own_claim-GOLD 8355 8447	similar requirement of accuracy bring the two methods in parity in terms of computation time
Tc0f129808d1a4016cb88c93e7a5bef50	own_claim-GOLD 8490 8590	the experiment was carried out using a uniformly discretized mesh, and uniform mechanical parameters
Ta2312177244aef520634211440bfd4ce	own_claim-GOLD 8592 8915	Real-world simulations do not have this regularity, and numerical instability with explicit methods occur in the stiffest regions of the mesh, which, even if they are marginal in the whole mechanical system, may totally “explode” and destroy the simulation and therefore will rule the size of the largest time step possible
T334fe5e75d2ed4a2bb42028ae8f047c0	own_claim-GOLD 8917 9040	With implicit methods, the resulting inaccuracies may be unnoticed when taking a time step adapted to the average stiffness
T710a2a631854aefd627dd40ca4865385	own_claim-GOLD 9143 9226	it is not possible to increase the time step of implicit methods as much as desired
Te74d5da57f9446ed8639a923beef8ee8	own_claim-GOLD 9231 9268	this cause very noticeable inaccuracy
T6c3bb9e282d5951aa3ac5edd8a282474	own_claim-GOLD 9338 9417	this is not an issue for draping problems where only the final state is desired
T6acca5a3d44b930cc93d79dd1846f121	own_claim-GOLD 9419 9459	this aspect has to be taken into account
T59a25cb048e4695db4b99a71b0270a44	own_claim-GOLD 9527 9618	implicit Euler is a good choice for robust simulation where accuracy is not really an issue
T6811b9775663538fd337a1b74a5c99c0	own_claim-GOLD 9620 9696	the explicit Runge-Kutta offers good possibilities of ensuring high accuracy
Tc683e0c406061f625017e24d133a62b0	own_claim-GOLD 9708 9731	its high-order solution
Td1791c01cbd0df98cd5f243217ea3d6b	own_claim-GOLD 9750 9847	is provides good possibilities integration error evaluation for efficient time step control which
T8951cc79e59a31a4a49f02722256b50b	own_claim-GOLD 9977 10132	The condition coefficient value is a good indicator of the time step and accuracy that can be expected for a given problem with a given iteration time step
Tac1f8ee1f6baf1a1dcc12a6d86569fb3	own_claim-GOLD 10134 10229	Considering a simulation involving elements n times smaller, maintaining accuracy and stability
T8f63a3f700df482ffef1929dc1e912fa	own_claim-GOLD 10269 10415	would require a time step n times smaller, and therefore n times as many iterations for simulating the mechanical system along a constant duration
T63cfb1390bf00284de893709cbbda0fd	own_claim-GOLD 10487 10552	the total computation time is finally multiplied by a drastic n 3
T887a1c6ba6bdbb7740ed71ee94b4d8cd	own_claim-GOLD 10623 10719	this factor is what cause explicit methods to become so inefficient with refined discretizations
Te7c639fbe9522c0ea0b4cca481e1f0bf	own_claim-GOLD 10792 10832	implicit methods are a bit more tolerant
T233e93b101c1561f414cf5f750321ee7	own_claim-GOLD 11701 11754	implicit methods should be quite strong on this point
Tc15825810d3c6948cf7ec1d6cb8699a4	own_claim-GOLD 13255 13310	the explicit methods seem quite not adapted for draping
T34f3ac835a107b0ad56c122ab4694dd2	own_claim-GOLD 13312 13562	Runge-Kutta requires more than 500 iterations for performing the simulation without instability, with the maximum allowed time step t = 0 . 0 0 1 s , which in fact corresponds to the maximum value of K coefficient experimented in the previous section
T18358abfa203051e00b4f0febd79d61e	own_claim-GOLD 13564 13666	The backward Euler method is robust enough to handle the problem without instability for any time step
Td728849f75576f0b91f7748e09880b8c	own_claim-GOLD 13689 13782	larger time steps do not proportionally translate into fewer steps for performing the draping
T34ce7b36feaf9ad4356192d7878913e2	own_claim-GOLD 13920 14103	we quickly observe a “saturation” of the number of iterations to a constant which seems to be inversely proportional to the number of Conjugate Gradient iterations that were performed
Te51e6d2367214562a249b2c3b8369f8a	own_claim-GOLD 14214 14275	the time step does not really reflect a time interval anymore
Td3c71a599b7e2013197a33e124df0263	own_claim-GOLD 14291 14566	the implicit method will only evaluate an approximation of the rest state of the mechanical system by linear extrapolation from the Hessian matrix, whose accuracy depends on the number of Conjugate Gradient iterations that were used to resolve the corresponding linear system
Tcf84a253645a8d16802ca2d43268b7f1	own_claim-GOLD 14575 14647	there is no real way to “cheat” on the time step for speeding up draping
T53ac7334a4728d093d900b5c309fef95	own_claim-GOLD 14692 14933	The total number of Conjugate Gradient iterations for performing all the simulation iterations of a draping problem cannot go below an incompressible number, related to a kind of “total computational difficulty” for solving a draping problem
Tb77729e0a77413b563e2cf6a71a3f61b	own_claim-GOLD 14996 15086	this experiment shows the drastic advantage of using implicit methods for draping problems
Te83927df0df9f2d189280c0e5a166e3d	own_claim-GOLD 15088 15363	With our implementation using the accurate elasticity model and the computation times measured in section 3.1, the draping could be computed in 30 seconds with Backward Euler with any large time step, compared to 150 seconds with Runge-Kutta when using an “optimal” time step
T8cc6b8487e4e9b8c9585a5237cea0b39	own_claim-GOLD 18944 19041	the resulting condition coefficient K is roughly 8 with a simulation time step of 10 milliseconds
Tbb6a326abc7b826fe4fb150a3b36dee8	own_claim-GOLD 19185 19284	This is a draping problem involving to obtain a rest position of the garment as quickly as possible
T50757d1e55a1d8dd0d5a24067d75f215	own_claim-GOLD 19386 19437	The dynamical motion of the cloth is important here
T3ffda489c2982dbb025a69d7b12cd804	own_claim-GOLD 19439 19550	The garment assembly and seaming operations could be performed almost four times faster with the Backward Euler
T3b1bf50e14c64e9b76c3985fa517b088	own_claim-GOLD 19563 19584	than with Runge-Kutta
Td306e933ca5d1064c90854465df784eb	own_claim-GOLD 19611 19789	collision detection and response account for more than the half of the computation time, and actually limits the time step size when contact starts between the cloth and the body
T383015aed9723cd0fe039428d520e53b	own_claim-GOLD 19791 19983	For the dynamical animation, comparable accuracy could be obtained between Runge-Kutta and Backward Euler using eight iterations of the Conjugate Gradient, which gave similar computation times
T3c912fbb64d5e18555eef9865403512b	own_claim-GOLD 19985 20010	The backward Euler method
Tedc8d23ce1ffb8e186c2a609267981c7	own_claim-GOLD 20019 20111	allowed the increase of the time step up to 0.1 seconds, where inaccuracies began to show up
T420792cf3147a01bff11380ace6b60bd	own_claim 32 102	Performance is a key issue in choosing the adequate integration method
Tb06ff576dc2b98e0eeeaba99ae54cd6b	own_claim 605 755	The time step for one iteration, which represents the time discretization required to reach a given accuracy or numerical stability for a given method
T0313ecfd2aa51de6458f23eb431c6b67	own_claim 759 928	The desired accuracy of the resolution, which may be coarse if only static equilibrium is to be computed, or high if the whole dynamic evolution of the system is desired
T45f7d692d779be95fdd4ba93a5816517	own_claim 1021 1140	The numerical stability of the method, which also limits the time step for a given method and a given mechanical system
Tb1202e5569ddedccc47fb49ae1c3905d	own_claim 2568 2764	The most important fact to note is that the application of the Backward Euler method with a reduced number of Conjugate Gradient iterations compares very well with the traditional explicit methods
T4ca1bfaacaf0817d4240312ea196a3b6	own_claim 2766 2855	With one iteration only, it is barely worse than the very simple explicit Midpoint method
T55483979f00e609ebd8f85f2a9f3e66c	own_claim 2857 2875	Our implementation
T82026719450c9b87a7245e43a40b7078	own_claim 2901 3111	does not explicitly construct the matrix of the system to be resolved by the Conjugate Gradient, but computes “on the fly” the product of this matrix with vectors when needed by the Conjugate Gradient algorithm
T503f39ebe0abdd364f4b9984037f3bf7	own_claim 3113 3212	This gives a very efficient implementation when using a low number of Conjugate Gradient iterations
T7c185fb72bc572d63a19cd17a87f3f58	own_claim 3263 3310	which is often sufficient for most applications
T5dba26d15a23a7290f2255e16f0ffbfd	own_claim 3312 3427	These tests will help us to choose the method that gives the best compromise between accuracy and computation speed
T0ad89c3b4b53a3790dc9524f97569c2e	own_claim 4516 4657	This non-dimensional coefficient actually measures the “numerical difficulty” of computing an iteration of time step t with the given problem
T8fe801565bbb88bba8e9782926b26ce6	own_claim 5123 5194	the condition coefficient of the problem computed with (1) is K = 2 0 0
T2cf40fd1762c251248976eaa54d4d8a4	own_claim 5197 5283	It is possible to define similar coefficients related to bending and viscosity modulus
Tb1d1ed0ebbad50c417b5cafdacf99208	own_claim 6446 6692	This allows the iterations of the Conjugate Gradient algorithm to distribute the resolution numerical errors as evenly as possible between the particles, so that to obtain for instance a fall speed that does not depend on the mass of the particle
Tfcfdac21198efa824b97d727eb791bca	own_claim 7086 7138	Several interesting facts arise from this experiment
Tc809e7b9af86aea41697df486942e560	own_claim 7140 7228	As a matter of numerical stability, the Midpoint method supports K values up to almost 3
Ta6394fc299c94805a5c6397ee1267938	own_claim 7237 7293	the RungeKutta method supports K values up to almost 100
Te389a07bdbce57b85610da65fbdec086	own_claim 7315 7429	with Runge-Kutta, it is possible to use simulation time steps which are almost six times larger than with Midpoint
Td40a70e058d186cd20d11e1d68627b2c	own_claim 7550 7650	the Runge-Kutta method seems to be computationally two times more efficient than the Midpoint method
T9e38f1ca62490d32acba99c736654f4f	own_claim 7652 7795	As a matter of simulation accuracy, both Midpoint and Runge-Kutta seem to preserve accuracy correctly within their range of numerical stability
T513caccc53c6a376acee74bbb4546d5f	own_claim 7996 8081	accuracy is well preserved with one Conjugate Gradient iteration up to a K value of 4
Ta3b5c1f875fa8b8f24a99b7fdafd7ff5	own_claim 8087 8185	increasing the iteration number n times also increases the K value n 2 times for the same accuracy
T4b82e59c5ac2f561907ece2f251aaafe	own_claim 8214 8336	the Inverse Euler method needs at least four Conjugate Gradient iterations to reach the accuracy of the Runge-Kutta method
T494b27fcadc4bb636e476770c21edac7	own_claim 8355 8447	similar requirement of accuracy bring the two methods in parity in terms of computation time
T668837850024199a2fc9e3c7dc0885df	own_claim 8490 8590	the experiment was carried out using a uniformly discretized mesh, and uniform mechanical parameters
T15bcd0edf6a3a3921e63c2d0ee753093	own_claim 8592 8915	Real-world simulations do not have this regularity, and numerical instability with explicit methods occur in the stiffest regions of the mesh, which, even if they are marginal in the whole mechanical system, may totally “explode” and destroy the simulation and therefore will rule the size of the largest time step possible
T0670e820d0aaa85561877677d59df3e4	own_claim 8917 9040	With implicit methods, the resulting inaccuracies may be unnoticed when taking a time step adapted to the average stiffness
Tf6813d2496efd1dce5a6a29b8187640f	own_claim 9143 9226	it is not possible to increase the time step of implicit methods as much as desired
Tc916baa57feedf2cd1812814dd01c522	own_claim 9231 9268	this cause very noticeable inaccuracy
T87a6ea952415f0af62173001191acc7d	own_claim 9338 9417	this is not an issue for draping problems where only the final state is desired
T3a1df79dbf3dc49e3fdb2346d8c3d936	own_claim 9419 9459	this aspect has to be taken into account
T7ee285cca797105042a6e13b2704780d	own_claim 9527 9618	implicit Euler is a good choice for robust simulation where accuracy is not really an issue
T91edcf0c2543ebd4857aad02261963fa	own_claim 9620 9696	the explicit Runge-Kutta offers good possibilities of ensuring high accuracy
T83d2484fa732336565c3d2c990aefb45	own_claim 9708 9731	its high-order solution
Tc75b863956b91bd37c4e0d2c763d13bf	own_claim 9750 9847	is provides good possibilities integration error evaluation for efficient time step control which
T217c6b61dc6803d7930372c8f0f59c97	own_claim 9977 10132	The condition coefficient value is a good indicator of the time step and accuracy that can be expected for a given problem with a given iteration time step
Ta6b4c28510e0d703a080d91f6b17b190	own_claim 10134 10229	Considering a simulation involving elements n times smaller, maintaining accuracy and stability
Tc5504c84f90c1800c1debda44f4b508f	own_claim 10269 10415	would require a time step n times smaller, and therefore n times as many iterations for simulating the mechanical system along a constant duration
T496c138d6c1cca31f4f532ed7bdc28b6	own_claim 10487 10552	the total computation time is finally multiplied by a drastic n 3
T55dd97a3093107c4b50e1e1d4de156b3	own_claim 10623 10719	this factor is what cause explicit methods to become so inefficient with refined discretizations
T8f4be173a9f01ec6c624acff62b30c54	own_claim 10792 10832	implicit methods are a bit more tolerant
T71563724fe0f42613e793be959e8c676	own_claim 11701 11754	implicit methods should be quite strong on this point
T5f4158f3b3f426d9d16b140c879aae13	own_claim 13255 13310	the explicit methods seem quite not adapted for draping
Tc589632e486dc75c500beb7f8208045e	own_claim 13312 13562	Runge-Kutta requires more than 500 iterations for performing the simulation without instability, with the maximum allowed time step t = 0 . 0 0 1 s , which in fact corresponds to the maximum value of K coefficient experimented in the previous section
Tc2d8a3f6ad17996ca19f766353c09bd7	own_claim 13564 13666	The backward Euler method is robust enough to handle the problem without instability for any time step
Taaf10a4a6c50a13c2625494537a68e86	own_claim 13689 13782	larger time steps do not proportionally translate into fewer steps for performing the draping
T5246e63d650931a39260cc02a62eb956	own_claim 13920 14103	we quickly observe a “saturation” of the number of iterations to a constant which seems to be inversely proportional to the number of Conjugate Gradient iterations that were performed
Tbb13f66f2e01ac8d3d69e9f26c98bba0	own_claim 14214 14275	the time step does not really reflect a time interval anymore
T313dedaa8eda9f5a87d37cf1db2cd954	own_claim 14291 14566	the implicit method will only evaluate an approximation of the rest state of the mechanical system by linear extrapolation from the Hessian matrix, whose accuracy depends on the number of Conjugate Gradient iterations that were used to resolve the corresponding linear system
T88c834b620cdced79c3ec037e58e6e89	own_claim 14575 14647	there is no real way to “cheat” on the time step for speeding up draping
Tc4fd79f84fd25435eb560e390460d868	own_claim 14692 14933	The total number of Conjugate Gradient iterations for performing all the simulation iterations of a draping problem cannot go below an incompressible number, related to a kind of “total computational difficulty” for solving a draping problem
T7eead364f63deeae703afbc8bc379216	own_claim 14996 15086	this experiment shows the drastic advantage of using implicit methods for draping problems
T286c705b97e532a48f061280898d8cd7	own_claim 15088 15363	With our implementation using the accurate elasticity model and the computation times measured in section 3.1, the draping could be computed in 30 seconds with Backward Euler with any large time step, compared to 150 seconds with Runge-Kutta when using an “optimal” time step
T6ff707c0f7928cbe7b46559855f59459	own_claim 18944 19041	the resulting condition coefficient K is roughly 8 with a simulation time step of 10 milliseconds
T0b8f0c220da11bbf4a80019ece434648	own_claim 19185 19284	This is a draping problem involving to obtain a rest position of the garment as quickly as possible
T791867af0f18df7ac7b6b74af760581f	own_claim 19386 19437	The dynamical motion of the cloth is important here
Tc0b79581b12ffda172814410a394f269	own_claim 19439 19550	The garment assembly and seaming operations could be performed almost four times faster with the Backward Euler
T12f436a1e7442201e15ceb5973992905	own_claim 19563 19584	than with Runge-Kutta
T0f5e36d684b68e89ab61e5b31c079cea	own_claim 19611 19789	collision detection and response account for more than the half of the computation time, and actually limits the time step size when contact starts between the cloth and the body
T54c82afb31ff8c6591eb013af77eaaf7	own_claim 19791 19983	For the dynamical animation, comparable accuracy could be obtained between Runge-Kutta and Backward Euler using eight iterations of the Conjugate Gradient, which gave similar computation times
T95d8b1c855449f5d5075e75eff03b87a	own_claim 19985 20010	The backward Euler method
T87cc14acc73ecb88c82ccf687815ec72	own_claim 20019 20111	allowed the increase of the time step up to 0.1 seconds, where inaccuracies began to show up
