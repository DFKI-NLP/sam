T651df913cb9fe44d9616abd12279ab78	own_claim 119 209	The constraints we discuss in this section are either automatically determined by the user
T0163c413af3025349872bab48b40073f	data 219 265	geometric attachment constraints on a particle
Tdc1602e4a6571b12845628e7797a0b16	own_claim 267 293	or are contact constraints
Tf5014510673cd95dd1569081992b8bce	own_claim 320 357	between a solid object and a particle
Td5c6f928a09fec16237766924abbcbf0	own_claim 359 446	The techniques we describe in this section could be used for multi-particle constraints
T8a3d982a495c9b71cb4e6fb53cdc8367	own_claim 457 512	constraints that share particle would need to be merged
T5204563e9593dc63c2492bdebab56128	own_claim 520 554	a set of four-particle constraints
T4a7cc0751bb06004e2f9f43aa3ee88fe	data 564 614	vertex/triangle or edge/edge contacts in the cloth
T161157f9322eb1a0742ada9fa9072489	own_claim 616 685	might merge to form a single constraint on arbitrarily many particles
T3a007e3b153874e1bdf9f9267f9cfaf7	own_claim 693 723	would be expensive to maintain
T8475a09338f08d486740ae3f0fa64f43	own_claim 742 792	we handle cloth/cloth contacts with strong springs
T439cdeb781e90f83c62f4880eb8375d4	data 819 871	the simulator’s underlying implicit integration base
T89524aae7a13517d1a19317073fa789f	own_claim 873 897	and “position alteration
T4618cacdaced8f2ffde97a0379e05d57	data 925 934	section 6
T6bf97968d093fd92faf726057e3df04f	own_claim 936 1024	At any given step of the simulation, a cloth particle is either completely unconstrained
Tb2ae97c186db69d2b8bde5ac920fcc94	data 1056 1126	the particle may be constrained in either one, two or three dimensions
T670b4b6c05f8ca3b084e05e735edefd3	data 1134 1176	the differential nature of our formulation
T1cf8cd75abf715b62682a2353422aeac	own_claim 1178 1288	it is the particle’s acceleration, or equivalently, the change in the particle’s velocity, that is constrained
Tcc030acd4191b5235900e73ed3381225	data 1293 1344	the particle is constrained in all three dimensions
T03859dcea81d3692e6892ed17d16b139	own_claim 1351 1400	we are explicitly setting the particle’s velocity
Taee957d547ad8be502d56a7811071523	data 1424 1466	the constraint is in two or one dimensions
Ta3cc6a7b9af40f5723426958a667622e	data 1468 1560	we are constraining the particle’s velocity along either two or one mutually orthogonal axes
T739d2d49098c1cb02bd46f02ab594bd3	own_claim 1724 1743;1752 1900	Reduced Coordinates An obvious and quite exact method for constraining a particle is to reduce the number of coordinates describing the particle’s position and velocity
Tb0c97ff43d9bb1d13f3cbd50c80a3356	own_claim 1902 1961	A completely constrained particle would have no coordinates
T6c427d58ec47dd2ae6de6b96d99f0b0c	own_claim 1969 2039	a particle with one dimension of constraint would have two coordinates
T124272cf435b6f7d8b165eb7a5912fbc	own_claim 2041 2057	This is possible
T3f1cab9a67aae4ff0c1a08e0a587ba77	own_claim 2062 2097	it complicates the system immensely
T08985321dd5cd342a9d95ccdf045be6d	data 2102 2150	we change the number of coordinates per particle
Tb69af748d36412044e54da32b105e6c8	data 2152 2212	we alter the size of the derivative matrices in equation (6)
Tb7c989a334de4e32b650aa17d1d2e019	own_claim 2225 2245	the sparsity pattern
T37fe395e46c5d83ab030ed771cec6aaf	data 2265 2330	a particle changes from having no coordinates to some coordinates
Te7db60d8062e6fa51b46463b962963e4	data 2354 2422	the transient nature of contact constraints between cloth and solids
T8b0941c741b2af2eddbd17cf66e969b1	own_claim 2424 2448	this is most unappealing
T07b51d361389d95065d9394122bc79ea	own_claim 2450 2529	The computation of the derivative matrices’ entries is also greatly complicated
Tfcac6b5c00fe4111a0d9b14b61242d99	data 2539 2658	we must now introduce extra Jacobian matrices that relate a particle’s reduced coordinates to its motion in world-space
Tbb72a86450b3725d27fa93aed0ab4489	own_claim 2669 2799	correct constraint-release behavior between cloth and solid objects is difficult to achieve using a reduced coordinate formulation
Tb5cba7ac1d4791e13ab81d8552b0f587	own_claim 2826 2876	we immediately rejected this method of constraints
Td92d8dcbb453a638e51d236e4ac29ed3	own_claim 2900 2915;2924 2995	Penalty Methods We could constrain particles through the use of strong energy functions
T140fe317351a700907364593332fd38d	own_claim 3009 3071	stiff springs that attempt to prevent illegal particle motions
Ta41cfbb31d3e6f0d050d2063fb0f05f7	data 3079 3131	our entire formulation is geared to handle stiffness
T1fe6777badcb9c335ca334f245a02a6f	own_claim 3133 3191	the usual objections to enforcing constraints with springs
T7d5f372ede8b04c50e07a78c9536a5f6	data 3192 3212	very stiff equations
T0161b3f3267f7073a709cc07e65d76bc	own_claim 3213 3240	do not carry as much weight
Tb6c777bce11f3d83019f50db0a3a5426	own_claim 3278 3338	it to be a not unreasonable constraint enforcement mechanism
Tb0f863b2666e87bce5a4ecc7af3493d8	own_claim 3349 3399	penalty methods do not enforce constraints exactly
T15b631b699c05f31b348f44c53aa52a5	own_claim 3405 3456	they do add some additional stiffness to the system
Td2056ceb2824f86407b83c7b9a70dfa1	data 3464 3518	the mechanism we describe enforces constraints exactly
T5798f0db51c5d7ffa3adc29391282520	own_claim 3524 3547	adds no extra stiffness
Ta7dfe4a8526a3e98fcac14a50defa10a	own_claim 3549 3631	we turned away from penalty methods except in the case of cloth/cloth interactions
T9625ea45762396a23f7b5ef0c1b4cf68	own_claim 3655 3675;3684 3731	Lagrange Multipliers We could introduce additional constraint forces
T78df377166b4c578f523ea9c6b9b6326	data 3741 3761	Lagrange multipliers
Ted75c0df2a1fff3049b49d42509806ee	own_claim 3762 3804	into our system to satisfy the constraints
Ta7d02fd13034b8962fa9e2cf199e17fe	own_claim 3806 3885	This involves augmenting the linear system of equation (6) with extra variables
T307a614702b402e858932e0bded72de4	own_claim 3968 4031	this turns a positive definite system into an indefinite system
Tc279e4c09261181dced53447fd9fc688	own_claim 4050 4115	iterative methods such as CG will need to square the system first
Tb6c65da10c2c5c3625a174166020128a	own_claim 4125 4214	doubling the running time and degrading the numerical conditionining of the linear system
Te7bd32a6213a94329df058eb94552261	own_claim 4230 4337	an iterative method will generally not enforce the constraints exactly without a large number of iterations
Te9ab56d8711afa2dbdffbb6a85eccf9c	own_claim 4340 4394	A direct method for solving the augmented system would
T8c2b61d88c6426d788afb5a095390043	own_claim 4405 4423	avoid this problem
T12623c0e0ce4be170c6f2ed1a6f18091	own_claim 4433 4496	the constraint method we describe steps past these difficulties
T55a4a18ed6ddebf979f8b2472c492166	own_claim 4501 4547	we turned away from using Lagrange multipliers
Tb1600647f840169a3f9fe1086b55fc9e	own_claim 4610 4688	The idea behind our constraint enforcement mechanism is described quite simply
T220ea7bb119b04d8f853afc445462527	own_claim 4699 4778	the actual implementation is somewhat more complicated, to maximize performance
T7db1999016a57398c26cd0f6d9f075ac	own_claim 4780 4858	A dynamic simulation usually requires knowledge of the inverse mass of objects
T88d7b873a6bf4ef98dbd1eb04c10006e	data 4945 4962	a single particle
T7213173744cfa4b78be57a0cb6885293	data 5036 5056	inverse mass is used
T06ea4cd6deac7b081e20e639aa38d674	own_claim 5058 5120	it becomes trivial to enforce constraints by altering the mass
T62d4d877487da0a58d5bec4968cebf53	data 5147 5198	we want to keep particle i’s velocity from changing
T31c62e6aea1e7bf04489e0eebf8b6f97	data 5203 5227	we take 1/m i to be zero
T522564047bc489eda75ccc86c09f198a	own_claim 5229 5266	we give the particle an infinite mass
T7b07352397c03f3d8c37a6655f3189e6	own_claim 5311 5361	Complete control over a particle’s acceleration is
T667902d57e2f3ae6e33082f93502641f	data 5449 5527	we wish to constrain the particle’s acceleration in only one or two dimensions
T98b96361a1291d149894ae587a644fd2	own_claim 5538 5588	we normally think of a particle’s mass as a scalar
T5a802e4e84cb62fadbe6b5062009e3f0	own_claim 5590 5614	we need not always do so
T05a1501c9109aea4803f8b5b982a9e31	own_claim 5665 5703	Now ẍ i 0 0 0 must lie in the xy plane
T0d5fa754a85a43a02acb294291e442ea	own_claim 5705 5751	no acceleration in the z direction is possible
T2a68a4a0953b3a91e384a9bc4bb7ec1f	own_claim 5763 5876	an unconstrained particle can be considered to have the 3 × 3 inverse mass matrix 1 I, with I the identity matrix
T8733c7b428d5e8fbc5e69ba90baf5a53	own_claim 5893 5948	we are not restricted to coordinate-aligned constraints
Tc20e93299feef25bef4e251cbfad6063	data 5972 5994	a unit vector p ∈ IR 3
T05f54d6bac23dd87cfa5ac45681f9fe9	own_claim 5997 6096	a particle is prevented from accelerating along p by using an inverse mass matrix 1 (I − m i pp T )
Tc4bd165d600c9def90789e284ce9d5d0	own_claim 6098 6146	this follows from the fact that (I − pp T )p = 0
T666e65627e4dd8728df5d7c555777353	data 6165 6209	two mutually orthogonal unit vectors p and q
T2c094ec32321ba45cb92ac78b0e54353	own_claim 6211 6335	we prevent a particle from accelerating in either the p or q direction by using the inverse mass matrix 1 (I − pp T − qq T )
T4df98fa08b9af24c03384c7a1a6e2fff	own_claim 7197 7290	We are not limited to constraining particles to have zero accelerations in certain directions
T231ee6f7807646fbced02bba7f6ccd3c	own_claim 7300 7382	we control exactly what the change in velocity is along the constrained directions
T89c485f6f93c3ff463b4251a07c1fad7	own_claim 7517 7585	we can choose any value of z i for a completely constrained particle
T99ace68577f143d33fafd4783f9bf6e5	own_claim 7593 7623	all directions are constrained
T7ee428682bc60ba23e9fb9f930721273	own_claim 7625 7668	an unconstrained particle must have z i = 0
Tfd17306ef8a0a75811e00cb4be7644c9	data 7675 7707	it has no constrained directions
T5404375fad0f428bf9d4033f722bf700	own_claim 7710 7780	Using W and z, we rewrite equation (6) to directly enforce constraints
T9ec4169622114a470e7d2c64b451f3f5	data 7785 7793	we solve
T181f605fbb4fd30261e445ca2fc3477a	data 7826 7881;7899 7904	I − hW ∂v ∂f − h 2 W ∂x ∂f v = hW f 0 + h ∂x ∂f v 0 + z for v
Tab478cd98424885f0a5347a2112f1c75	own_claim 7906 7965	we will obtain a v which is consistent with our constraints
T73f4333d719b35a4f23bcc30ce51f4da	own_claim 7967 8019	Completely constrained particles will have v i = z i
T7148c87a020e734595212d7b55822a76	own_claim 8028 8139	partially constrained particles will have a v i whose component in the constrained direction(s) is equal to z i
Tedeac9bced6f649a7219e2fa3e66c0b5	own_claim 8272 8303	it worked exactly as advertised
T12f7805eacf6eb1d611362ec201719bd	own_claim 8305 8379	For very small test systems, we solved equation (14) using a direct method
T8bfcb1ae583e450a9a339de0ddead438	own_claim 8403 8423	without any problems
T56e6ff66f2f8c6e8d51eb9d4038e9087	own_claim 8515 8553	immediately presents us with a problem
Ta5d5964cc4b86d07f3b5c3bb40246afd	own_claim 8555 8601	equation (14) is not a symmetric linear system
T940276487edfb46bc297af314095c152	data 8652 8684	all particles have the same mass
T5b477654e4c1aa21c8b7b248f3d9650f	own_claim 8687 8697	CG methods
T124ca7b12881885fac54408953f40a9f	own_claim 8708 8734	require symmetric matrices
T984b431f1bdf65d93ad12c2db83fa56a	own_claim 8738 8840	We could apply a CG method to the unsymmetric matrix of equation (14) by use of the “normal equations”
T1a99b062af4b288e4add6c2b048538a6	own_claim 8846 9009	this involves multiplying the matrix of equation (14) with its transpose which doubles the cost of each iteration while squaring the condition number of the system
T1499fd12dd7d04b9bb4e05f437480019	data 9012 9014	14
Tabb41ba5904e0ec4bbee572289a5d91f	own_claim 9018 9044	a less than desirable plan
Tf98b5b1b3ada610b407a5509ef79a338	own_claim 9062 9131	using a CG method to solve the unsymmetric problem was not acceptable
Te700aa0b6b2f7bbcbbb9ec6fbe48c70f	own_claim 9143 9217	without constraints, applying a CG method to equation (6) is not difficult
Tbc7d71ace766a64c92b3155cf273334c	data 9227 9260	we can transform this equation to
Te429c2536f7d41dc9f14ac0c72b35ec8	own_claim 9272 9326	they work best on positive definite symmetric matrices
T693c8a51d47d5451178e3923990b5878	own_claim 9532 9579;9597 9653	M − h ∂v ∂f − h 2 ∂x ∂f v = h f 0 + h ∂x ∂f v 0 is symmetric and has the same solution v as equation (6)
T8a709438d1a882a0b28200589bca1bc1	own_claim 9670 9726	we cannot apply the same transformation to equation (14)
Tae5a192e78cf48d78b75ba0fe61b2db3	own_claim 9736 9749	W is singular
Te50c87444f1b017b286c42ce773cfca2	data 9750 9806	the filtering blocks in equation (13) are rank deficient
T02afd7ad70a22c238ebcefeb46c9167b	own_claim 9810 9844	we cannot multiply through by W −1
T9f4d3c402ee581bcd414e2a0e67830cd	own_claim 9847 9954	The solution to the problem of asymmetry is to modify the CG method so that it can operate on equation (15)
T989dcb3a1964fb7c881a65eb6c9d98cb	own_claim 9962 10042	procedurally applying the constraints inherent in the matrix W at each iteration
T9ef33b87600953e2c723dd6f6ede972b	own_claim 10044 10131	The modified method will need to know about the particles’ constraints and the vector z
T6633a40d04da9e64ae137830fbef2053	own_claim 10400 10471	our modified CG method will try to find v that satisfies two conditions
T5f2ff7d0142a44f505adb5ed78d8d523	own_claim 10475 10588	For each particle i, the component of r i in the particle’s unconstrained direction(s) will be made equal to zero
Td4cd3d5773ee49d2c50852461eabffca	data 10599 10649	the method is run for sufficiently many iterations
T26fefcd39bc5b8502732789413ec57a0	own_claim 10654 10758	For each particle i, the component of v i in the particle’s constrained direction(s) will be exactly z i
Tcb58cada5b013a0beededda01b34d4eb	own_claim 10812 10890	these two conditions imply that unconstrained particles have r i close to zero
T5b6758fdfc5ee3932d3ee74d902f8df7	own_claim 10898 10945	completely constrained particles have v i = z i
T1c83827121f7e57f74b4c9082c826f56	data 10970 10998	no particles are constrained
Taeabdfa1d15fae845948d09d03078f56	own_claim 11000 11078	our modified CG method should produce the same result as the regular CG method
T9ca1aeacf5201492b032c08c91cfcc64	own_claim 11162 11175	The CG method
Td81d5b3685a67ad63061aebc607b286d	own_claim 11220 11395	takes a symmetric positive semi-definite matrix A, a symmetric positive definite preconditioning matrix P of the same dimension as A, a vector b and iteratively solves A v = b
Ta1d9aa13f915491ba11e5cb4dbe25969	own_claim 11397 11444	The iteration stops when b − A v is less than b
T31b11ec464258e8747a6e8677d8e3fa7	own_claim 11486 11606	The preconditioning matrix P, which must be easily invertible, speeds convergence to the extent that P −1 approximates A
T126a3f6485c32f8c5bdeecdbe29a8cb3	data 11658 11660	14
Tbcb1256bad3e240bab1c856de6591ec7	own_claim 11663 11695	for information on the CG method
Ta5979ea29a72c3752ca4f85c959fdd45	own_claim 12971 13060	The unmodified conjugate gradient method establishes a stopping criterion based on b T Pb
T312fba357bb3d5d26300e75ab5885bbf	data 13068 13127	our constrained formulation ignores certain components of b
Tf4d576803188c46c634bb8d50ef5419e	own_claim 13129 13166	our stopping criterion should as well
T2ee81361be9dc9c907e23f3abc2732cf	own_claim 13171 13197	we add filtering to line 3
T9f3f2b2d47cc294b89e69311a9414c0b	own_claim 13199 13300	The vector r measures the solution error b − A v, and should not include error due to the constraints
T7c1c7fbfdf4b4a73ccfabc066016757f	own_claim 13308 13341	we add filtering at lines 4 and 8
T70040b53e9214560bc470821b78fbd73	own_claim 13354 13472	removing the calls to filter and changing line 2 to v = 0 yields the standard preconditioned conjugate gradient method
Te20ad609e8baf4ec6aa86bb8529c7346	own_claim 13611 13655	More elaborate preconditioners could be used
Tfe5189fd0667f26028bfffe94fa5ae54	own_claim 13673 13710	there is a large speedup to be gained
T87909b92a0e39da8b17a2b957f788319	data 13857 13869	modified-pcg
Tb9d38f34d682022fc4e12a5adb34be5c	own_claim 13974 14022	Proofs about CG methods are difficult in general
T646c0f5e2ef6d72e02c5980ce043cce2	own_claim 14024 14064	in practice, our method always converges
T19dff232bb06b1dfdea33791023e6660	data 14219 14256	we began using procedure modified-pcg
Tc4f1aad01c21533334b47d8f47b98203	own_claim 14258 14349	we did not notice any substantial change in the number of iterations required by the method
T3133884ed30f06a552c484eee5f6be8b	own_claim 14381 14430	the two methods have similar convergence behavior
T3ede4b0adce3bcd012d5098ef5d06f3f	own_claim 14466 14586	the running time is close to O(n 1.5 ), which is what unmodified CG would be expected to deliver on this sort of problem
T4f5c8e25280b58e8aba89b3001f91927	data 14589 14591	14
T2c14d854eb99bdd7b582782cb94855ab	own_claim 14672 14695	For contact constraints
T5f1234a9e26c89ed989bb5d45e105e40	data 14697 14728	between cloth and solid objects
Tef38e923128fd70ff58c3ab8b4ef96e1	own_claim 14730 14838	we need to know what the actual force of constraint is, in order to determine when to terminate a constraint
Tef569e202ba988aff6893c0d36a3e11b	own_claim 14854 14952	we need to know the constraint force actually exerted in order to model frictional forces properly
T2dbde81a9178f3dfcc644ad9ab6c0260	own_claim 14967 15048	it is easy to add one more step to modified-pcg to determine the constraint force
T95876aece5c240b17251d61c3f75603f	data 15055 15078	modified-pcg terminates
Tece5545f20244d61dd6182beb07d5c44	own_claim 15080 15162	the residual error e = A v − b has the property that e i need not be close to zero
Td620c47cf2783f4d5ec2436d47d9579a	data 15166 15191	particle i is constrained
Ta814dece561d075f044eddaf1b6f99bd	own_claim 15202 15298	e i is exactly the extra constraint force that must have been supplied to enforce the constraint
T0a7a83a4f70ea04fb3371d0b4e4c8053	own_claim 15306 15428	we can compute constraint forces at the end of modified-pcg by performing one last matrixvector product to compute A v − b
T9f810585d229786851d583dcdc734b5f	own_claim 15431 15487	The vector r in modified-pcg is equal to filter(A v − b)
T5d841e48174254058c0acff7666b08fa	own_claim 15492 15556	the extra matrix-vector product to compute e really is necessary
T07e4c50bc7d6c05ce873a3b7b6d2c6dc	own_claim 15559 15665	The particles’ accelerations are inherently dependent on one another through the matrix A of equation (16)
T3b9ca114e9d4f27a4305316240d3d028	own_claim 15683 15751	the correct approach to determing constraint release is combinatoric
Tc77da6a1db8d725a085754604bf75499	data 15759 15765	Baraff
Tabc0fc5ef7e8222e14d670e5ad765949	data 15768 15769	2
Tc13bbb58ea30c4c2eb48dd1739067a0d	own_claim 15847 15875	we allow contacts to release
T0e36834afde4c6a721f771a626c4a0f8	data 15881 15985	the constraint force between a particle and a solid switches from a repulsive force to an attractive one
Tf53ccc8618d35c1cbbc5c9b5e0228758	own_claim 15987 16028	In practice, this has proven to work well
T3445df49f380ba80e6228eff2156bd1f	own_claim 16030 16065	Friction presents a similar problem
Ta9cb640a6bdbf69b1822397ffc9d50de	data 16072 16094	cloth contacts a solid
T5e952dd29c15c6b66ba51fb31b7ac023	data 16096 16133	we lock the particle onto the surface
T40618f17dbf35a677ee9e17302aad9e3	data 16138 16177	the relative tangential velocity is low
Tdb5ebc7690ecc1599447e2942e87eccc	own_claim 16179 16210	We monitor the constraint force
T30958c37475f4762c2a3530f48ef965a	data 16219 16281	the tangential force exceeds some fraction of the normal force
T09ecf62a4b7aaf2406442e4e023b3ff9	own_claim 16283 16328	we allow the particle to slide on the surface
T17ec1caba9ff12aaa1537f5525adc5ad	data 16334 16357	high sliding velocities
Tabcd2076dca049240e9ef5314b98137a	own_claim 16359 16473	we apply a dissipative tangential force, opposite the relative sliding direction, proportional to the normal force

